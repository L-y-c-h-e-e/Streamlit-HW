import dask.dataframe as dd
import pandas as pd
import numpy as np
import time
import requests
from datetime import datetime
import aiohttp
import asyncio
import streamlit as st



#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
@st.cache_data
def data_analysis(df):

    #–í—ã—á–∏—Å–ª—è–µ–º–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∏ std(–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π)
    df["moving_avg"] = (df.groupby("city")["temperature"]
        .rolling(window=30, min_periods=1, center=True)
        .mean()
        .reset_index(level=0, drop=True)
    )
    df["std"] = df.groupby("city")["temperature"].transform("std")

    #–í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ —Å–µ–∑–æ–Ω–∞–º
    df["avg_by_season"] = df.groupby(["city","season"])["temperature"].transform("mean")
    df["std_by_season"] = df.groupby(["city","season"])["temperature"].transform("std")

    #–í—ã—è–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏, –≥–¥–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞ ¬±2ùúé
    df["lower_bound"] = df["moving_avg"] - 2 * df["std"]
    df["upper_bound"] = df["moving_avg"] + 2 * df["std"]
    df["is_anomaly"] = (df["temperature"] < df["lower_bound"]) | (df["temperature"] > df["upper_bound"])
    df["is_anomaly"] = df["is_anomaly"].astype(int)

    return df


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑/c —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ–º –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Ö
def data_analysis_time(df):
    # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏—è
    start_time = time.time()
    df_result = data_analysis(df)
    end_time = time.time()
    single_time = end_time - start_time
    st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–µ–∑ —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏—è: {single_time:.2f} —Å–µ–∫—É–Ω–¥")

    ddf = dd.from_pandas(df, npartitions=10)

    # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ–º
    start_time = time.time()
    df_result_dask = ddf.map_partitions(data_analysis).compute()
    end_time = time.time()
    parallel_time = end_time - start_time
    st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∞—Ä–∞–ª–ª–µ–ª–∏–≤–∞–Ω–∏–µ–º: {parallel_time:.2f} —Å–µ–∫—É–Ω–¥")
    st.write(f"–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {single_time - parallel_time:.2f} —Å–µ–∫—É–Ω–¥\n")



#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def create_test_df(size):
    cities = [
        "New York", "London", "Paris", "Tokyo", "Moscow", "Sydney", "Berlin", "Beijing", "Dubai", "Rio de Janeiro",
        "Los Angeles", "Chicago", "Toronto", "Singapore", "Hong Kong", "Bangkok", "Istanbul", "Rome", "Madrid", "Amsterdam",
        "Seoul", "Shanghai", "Mumbai", "Cairo", "Mexico City", "S√£o Paulo", "Buenos Aires", "Cape Town", "Stockholm", "Vienna"
    ]
    data = {
        "city": np.random.choice(cities, size=size),
        "temperature": np.random.normal(loc=10, scale=5, size=size),
        "season": np.random.choice(["winter", "spring", "summer", "autumn"], size=size)
    }
    return pd.DataFrame(data)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API-–∫–ª—é—á–∞
@st.cache_data
def check_api_key(api_key):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": "London",
        "appid": api_key,
        "units": "metric"
    }
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        return True, None
    else:
        error_data = response.json()
        return False, error_data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ
@st.cache_data
def is_normal(city_name, temp, df):
    season = get_season()

    historical_df = df[(df["city"] == city_name) & (df["season"] == season)]

    avg_temp = historical_df["temperature"].mean()
    std_temp = historical_df["temperature"].std()

    min_temp = avg_temp - 2 * std_temp
    max_temp = avg_temp + 2 * std_temp

    if min_temp <= temp <= max_temp:
        return True, round(avg_temp,2), round(std_temp,2)
    else:
        return False, round(avg_temp,2), round(std_temp,2)


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
@st.cache_data(ttl=86400)
def get_season():
    month = datetime.now().month
    if month in [12, 1, 2]:
        return "winter"
    elif month in [3, 4, 5]:
        return "spring"
    elif month in [6, 7, 8]:
        return "summer"
    else:
        return "autumn"


#–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ
def get_temperature(city_name, api_key):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city_name,
        "appid": api_key,
        "units": "metric"
    }
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        return data["main"]["temp"]
    else:
        st.write(f"–û—à–∏–±–∫–∞ {response.status_code} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}")
        return None


#–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ –≥–æ—Ä–æ–¥–µ
async def async_get_temperature(city_name, api_key):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city_name,
        "appid": api_key,
        "units": "metric"
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(base_url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                return data["main"]["temp"]
            else:
                st.write(f"–û—à–∏–±–∫–∞ {response.status} –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}")
                return None


#–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
async def async_get_temperatures(city_names, api_key):
    tasks = [async_get_temperature(city, api_key) for city in city_names]
    temperatures = await asyncio.gather(*tasks)
    return temperatures


#–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤
def sync_anomalies(df, api_key, season):
    results = []
    for city in df["city"].unique():
        temp = get_temperature(city, api_key)
        normal, avg_temp, std_temp = is_normal(city, temp, df)

        results.append({
            "city": city,
            "is_normal": int(normal),
            "current_temp": temp,
            "avg_temp": avg_temp,
            "std_temp": std_temp,
            "season": season
        })

    return pd.DataFrame(results)


#–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤
async def async_anomalies(df, api_key, season):
    cities = df["city"].unique()
    temperatures = await async_get_temperatures(cities, api_key)
    results = []
    for city, temp in zip(cities, temperatures):
        normal, avg_temp, std_temp = is_normal(city, temp, df)

        results.append({
            "city": city,
            "is_normal": int(normal),
            "current_temp": temp,
            "avg_temp": avg_temp,
            "std_temp": std_temp,
            "season": season
        })

    return pd.DataFrame(results)


def anomaly_time(city_name, api_key):
    #–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    start_time = time.time()
    sync_temp = get_temperature(city_name, api_key)
    sync_time = time.time() - start_time
    st.subheader(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city_name}: {sync_temp}¬∞C")
    st.write(f"–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞: {sync_time:.2f} —Å–µ–∫—É–Ω–¥")

    #–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    start_time = time.time()
    async_temp = asyncio.run(async_get_temperature(city_name, api_key))
    async_time = time.time() - start_time
    st.write(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞: {async_time:.2f} —Å–µ–∫—É–Ω–¥\n")


def anomalies_time(df, api_key, season):
    #–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
    start_time = time.time()
    sync_results = sync_anomalies(df, api_key, season)
    sync_time = time.time() - start_time
    st.write(f"–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤: {sync_time:.2f} —Å–µ–∫—É–Ω–¥")

    #–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
    start_time = time.time()
    async_results = asyncio.run(async_anomalies(df, api_key, season))
    async_time = time.time() - start_time
    st.write(f"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤: {async_time:.2f} —Å–µ–∫—É–Ω–¥")
    st.write(f"*–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±—ã—Å—Ç—Ä–µ–µ –≤ {sync_time / async_time:.2f} —Ä–∞–∑.*")

    #–í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü
    st.subheader("–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    st.write(sync_results.head(5))

    st.subheader("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    st.write(async_results.head(5))


#–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    data = pd.read_csv("temperature_data.csv")
    return data